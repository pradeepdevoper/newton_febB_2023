Bitwise operator:
//Entire javascript code is running on 64bit operation. Decimal representation: - 0 to 9.
//Bitwise operator will run on 32bits - binary representation - 0 to 1. (binary base 2)
Converting decimal to binary 
     5/2 - 1
     2/2 - 0 
     1
output: 101 
Converting binary to decimal 
1*2(power of 2) + 0*2(power of 1) + 1*2(power of 0)
4 + 0 + 1 = 5
output 5
//In javascript during execution phase it will work in 32 bits and finally after executed it will return again in decimal 
=========================================================================
Types of Bitwise operator
1.Bitwise And (&)
example:
1 & 1 -- 1 
0 & 1 -- 0 
1 & 0 -- 0 
0 & 0 -- 0
2.Bitwise OR (|)
example:
1 & 1 -- 1 
0 & 1 -- 1
1 & 0 -- 1 
0 & 0 -- 0
3.Bitwise XOR (a^b)
example:
1 & 1 -- 0 
0 & 1 -- 1
1 & 0 -- 1 
0 & 0 -- 0
4.Bitwise Not (~a) - It is not supporting properly in the browser
example 
0 -- 1
1 -- 0
5.left shift (a<<b)
example 
a = 0101
b = 1
a<<b - 1010
6.right shift (a>>b)
example 
a = 0101
b = 1
a>>b - 0010
7.zero fill right shift(a>>>b)
example = 0101
b = 1 
a>>>b - 0001
==============================================
Operator Precedence:
//The way operator is going to work 
//multiplication and division have same precedence. if we have same precedence it will work depends on associtivity (left to right)
//any operator you are going to use please use parenthesis to make it more priority. because atmost priority given to parenthesis ().
example:
((2*4) * (3/3)) = 8 * 1 = 8
==========================================
Logging methods:
1.console.log() - general
2.console.info() - information
3.console.warn()  - warning
4.console.error() - error
=========================================
Decision Making statement:
1.if else 
example:
if(){

}else{

}
example:
if(){

}else if(){

}
else{

}
2. switch 
example:
switch(input){
    case 0: 

         break;

    case 1:
         
         break;
    default:
}
=====================================